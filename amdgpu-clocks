#!/usr/bin/env bash

USER_STATES_PATH=${USER_STATES_PATH:-/etc/default/amdgpu-custom-state}
SYS_PPFMASK=/sys/module/amdgpu/parameters/ppfeaturemask

[[ ! -r $SYS_PPFMASK ]] && echo "Can't access $SYS_PPFMASK" && exit 2
[[ $1 == "restore" ]] && RESTORE=true

function check_ppfeaturemask() {
  CURRENT_HEX_MASK=$(printf '%#x' "$(( $(cat "$SYS_PPFMASK") ))")
  # 0x4000 or 14th bit is one indicating if OverDrive has been enabled
  OVERDRIVE_MASK=$(printf '%#x' "$(( CURRENT_HEX_MASK & 0x4000 ))")
  [[ $OVERDRIVE_MASK == "0x4000" ]] && return 0

  WANTED_MASK=$(printf '%#x' "$(( CURRENT_HEX_MASK | 0x4000 ))")
  echo -n "In order to set custom amdgpu power states, enable OverDrive by "
  echo -n "booting the machine with amdgpu.ppfeaturemask=$WANTED_MASK "
  echo    "kernel option" && exit 2
}

function fill_sclks() {
  if [[ -z $3 ]]; then       # Vega20 and later ASICs
    echo "  SCLK state $1: $2"
    SCLK[$1]="s $1 ${2%*M[Hh]z}"
  else                       # Vega10 and previous ASICs
    echo "  SCLK state $1: $2, $3"
    SCLK[$1]="s $1 ${2%*M[Hh]z} ${3%*mV}"
  fi
}

function fill_sclk_offset() {
  local offset_value

  if [[ $1 =~ M[Hh]z ]]; then
    [[ -z $SCLK_OFFSET_METHOD ]] && SCLK_OFFSET_METHOD="proper"
    offset_value=$1
  else
    # Legacy method for Linux < 6.14
    # Modyfing [0] index is unsupported
    [[ -z $SCLK_OFFSET_METHOD ]] && SCLK_OFFSET_METHOD="legacy"
    [[ $1 != "1" ]] && return
    offset_value=$2
  fi

  echo "  SCLK offset: $offset_value"
  SCLK_OFFSET="s ${offset_value%*M[Hh]z}"
  [[ $SCLK_OFFSET_METHOD == "legacy" ]] && SCLK_OFFSET="s 1 ${offset_value%*M[Hh]z}"
}

function fill_mclks() {
  if [[ -z $3 ]]; then       # Vega20 and later ASICs
    echo "  MCLK state $1: $2"
    MCLK[$1]="m $1 ${2%*M[Hh]z}"
  else                       # Vega10 and previous ASICs
    echo "  MCLK state $1: $2, $3"
    MCLK[$1]="m $1 ${2%*M[Hh]z} ${3%*mV}"
  fi
}

function fill_vddccurve() {
  if [[ $# -eq 3 ]]; then
    echo "  VDDC Curve state $1: $2 $3"
    VDDC_CURVE[$1]="vc $1 ${2%*M[Hh]z} ${3%*mV}"
  elif [[ $# -eq 4 ]]; then
    echo "  VDDC Curve state $1: $2 @ $4"
    VDDC_CURVE[$1]="vc $1 ${2%*M[Hh]z} ${4%*mV}"
  else
    echo "ERROR: Can't parse '$*', did pp_od_clk_voltage API change again?"
    exit 2
  fi
}

function fill_vddgfx_offset() {
  echo "  VDD GFX Offset: $1"
  VDDGFX_OFFSET="vo ${1%*mV}"
}

function fill_zero_rpm() {
  if [[ $1 == "enable" ]]; then
    echo "  Zero RPM enable: $2"
    ZERO_RPM_ENABLE=$2
  elif [[ $1 == "temperature" ]]; then
    echo "  Zero RPM temperature: $2"
    ZERO_RPM_STOP_TEMP=$2
  fi
}

function parse_states() {
  local zero_rpm_setting

  mapfile -t STATE_LINES < <(tr -d '\000' < "$1")
  for LNNO in "${!STATE_LINES[@]}"; do
    LINE=${STATE_LINES[$LNNO]}
    case $LINE in
      "OD_SCLK:")
        state_fill_func=fill_sclks ;;
      "OD_SCLK_OFFSET:")
        state_fill_func=fill_sclk_offset ;;
      "OD_MCLK:")
        state_fill_func=fill_mclks ;;
      "OD_VDDC_CURVE:")
        state_fill_func=fill_vddccurve ;;
      "VDDC_CURVE_SCLK["[012]"]: "*)
        ;; # Just ignoring these for now
      "VDDC_CURVE_VOLT["[012]"]: "*)
        ;; # Just ignoring these for now
      "OD_VDDGFX_OFFSET:")
        offset_fill_func=fill_vddgfx_offset ;;
      "OD_RANGE:")
        echo "  Value ranges:";;
      "SCLK: "*)
        echo "    SCLK clock range: ${LINE#* }"
        MAX_SCLK=${LINE##* }
        MAX_SCLK=${MAX_SCLK%*M[Hh]z}
        ;;
      "SCLK_OFFSET:"*)
        echo "    SCLK offset range: ${LINE#* }"
        MAX_SCLK_OFFSET=${LINE##* }
        MAX_SCLK_OFFSET=${MAX_SCLK%*M[Hh]z}
        ;;
      "MCLK: "*)
        echo "    MCLK clock range: ${LINE#* }"
        MAX_MCLK=${LINE##* }
        MAX_MCLK=${MAX_MCLK%*M[Hh]z}
        ;;
      "VDDGFX_OFFSET: "*)
        echo "    VDDGFX offset range: ${LINE#*: }"
        VOLTAGE_OFFSET_RANGE=${LINE#*: }
        ;;
      "VDDC: "*)
        echo "    VDDC voltage ${LINE##* }"
        MAX_VDDC=${LINE##* }
        MAX_VDDC=${MAX_VDDC%*mV}
        ;;
      [0-9]": "*)
        $state_fill_func "${LINE%%:*}" "${LINE#* }"
        ;;
      [-0-9]*"M"[Hh]"z")
        $state_fill_func "${LINE%%:*}" "${LINE#* }"
        ;;
      [-0-9]*"mV")
        $offset_fill_func "${LINE%%:*}" "${LINE#* }"
        ;;
      [0-9]*)
        $state_fill_func ${zero_rpm_setting} "${LINE%%:*}" "${LINE#* }"
        ;;
      "FORCE_SCLK: "[0-9]*)
        echo "  Force SCLK state to ${LINE#* }"
        FORCE_SCLK=${LINE#* }
        ;;
      "FORCE_MCLK: "[0-9]*)
        echo "  Force MCLK state to ${LINE#* }"
        FORCE_MCLK=${LINE#* }
        ;;
      "FORCE_POWER_CAP: "[0-9]*)
        MICROWATTS=${LINE#* }
        echo "  Force power cap to ${MICROWATTS%*000000}W"
        FORCE_POWER_CAP=${LINE#* }
        ;;
      "FORCE_PERF_LEVEL: "[a-z]*)
        echo "  Force performance level to ${LINE#* }"
        FORCE_LEVEL=${LINE#* }
        ;;
      "FORCE_POWER_PROFILE: "[0-9]*)
        echo "  Force power profile to ${LINE#* }"
        FORCE_PROFILE=${LINE#* }
        ;;
      "FAN_ZERO_RPM_ENABLE:")
        state_fill_func=fill_zero_rpm
        zero_rpm_setting="enable"
        ;;
      "FAN_ZERO_RPM_STOP_TEMPERATURE:")
        state_fill_func=fill_zero_rpm
        zero_rpm_setting="temperature"
        ;;
      "ZERO_RPM_ENABLE: "*)
        echo "    Zero RPM enable range: ${LINE#*: }" ;;
      "ZERO_RPM_STOP_TEMPERATURE: "*)
        echo "    Zero RPM stop temperature range: ${LINE#*: }" ;;
      "#"*) ;;
      "") ;;
      *)
        echo "  Unexpected value in $1:$((LNNO + 1))"
        exit 2
        ;;
    esac
  done

  [[ $1 != "$SYS_PP_OD_CLK" ]] && return

  DETECTED_MCLK=("${MCLK[@]}")
  DETECTED_VDDC_CURVE=("${VDDC_CURVE[@]}")
  POWER_LIMIT=$(cat "$PWR_CAP_FILE")
  echo "  Current power cap: ${POWER_LIMIT%*000000}W"
}

function set_custom_states() {
  if [[ $RESTORE == "true" && $FORCE_LEVEL == "auto" ]]; then
    echo manual > "$PWR_LEVEL"
    sleep 0.25
    echo 0 > "$SYS_DPM_SCLK" 2>&1
    echo 0 > "$SYS_DPM_MCLK" 2>&1
    sleep 0.25
  fi

  # clocks
  for CSTATE in "${SCLK[@]}"; do
    [[ -z $CSTATE ]] && continue
    echo "$CSTATE" > "$SYS_PP_OD_CLK"
  done
  [[ -n $SCLK_OFFSET ]] && echo "$SCLK_OFFSET" > "$SYS_PP_OD_CLK"

  # memory clocks
  local curr_index
  for MSTATE in "${MCLK[@]}"; do
    curr_index=${MSTATE:3:1}
    OLD_MSTATE=${DETECTED_MCLK[$curr_index]}

    [[ $MSTATE == "$OLD_MSTATE" ]] && continue
    echo "$MSTATE" > "$SYS_PP_OD_CLK" ||
      echo "ERROR: echo $MSTATE > $SYS_PP_OD_CLK"
  done

  # voltage
  for VDDC_CURVE_STATE in "${VDDC_CURVE[@]}"; do
    curr_index=${VDDC_CURVE_STATE:3:1}
    OLD_CURVE_STATE=${DETECTED_VDDC_CURVE[$curr_index]}

    [[ $VDDC_CURVE_STATE == "$OLD_CURVE_STATE" ]] && continue
    echo "$VDDC_CURVE_STATE" > "$SYS_PP_OD_CLK" ||
      echo "ERROR: echo $VDDC_CURVE_STATE > $SYS_PP_OD_CLK"
  done

  [[ -n $VDDGFX_OFFSET ]] && echo "$VDDGFX_OFFSET" > "$SYS_PP_OD_CLK"
  echo 'c' > "$SYS_PP_OD_CLK"

  # power settings
  [[ -n $FORCE_LEVEL     ]] && echo "$FORCE_LEVEL"     > "$PWR_LEVEL"
  [[ -n $FORCE_PROFILE   ]] && echo "$FORCE_PROFILE"   > "$PWR_PROFILE"
  [[ -n $FORCE_SCLK      ]] && echo "$FORCE_SCLK"      > "$SYS_DPM_SCLK"
  [[ -n $FORCE_MCLK      ]] && echo "$FORCE_MCLK"      > "$SYS_DPM_MCLK"
  [[ -n $FORCE_POWER_CAP ]] && echo "$FORCE_POWER_CAP" > "$PWR_CAP_FILE"

  # zero rpm
  if [[ -f $SYS_ZERO_RPM_ENABLE && -n $ZERO_RPM_ENABLE ]]; then
    echo "$ZERO_RPM_ENABLE" > "$SYS_ZERO_RPM_ENABLE"
    echo "c" > "$SYS_ZERO_RPM_ENABLE"
  else
    echo "Skipping ZERO_RPM_ENABLE: make sure to have Linux 6.13 or newer."
  fi
  if [[ -f $SYS_ZERO_RPM_STOP_TEMP && -n $ZERO_RPM_STOP_TEMP ]]; then
    echo "$ZERO_RPM_STOP_TEMP" > "$SYS_ZERO_RPM_STOP_TEMP"
    echo "c" > "$SYS_ZERO_RPM_STOP_TEMP"
  else
    echo "Skipping FAN_ZERO_RPM_STOP_TEMPERATURE: make sure to have Linux 6.13 or newer."
  fi
}

function backup_states() {
  if [[ -r $BACKUP_STATE_FILE ]]; then
    echo "Won't write initial state to $BACKUP_STATE_FILE, it already exists."
    return
  fi

  cp "$SYS_PP_OD_CLK" "$BACKUP_STATE_FILE"
  [[ $PWR_LEVEL == "manual" ]] && echo "FORCE_POWER_PROFILE: 0" >> "$BACKUP_STATE_FILE"
  echo "FORCE_PERF_LEVEL: $(cat "$PWR_LEVEL")" >> "$BACKUP_STATE_FILE"
  echo "FORCE_POWER_CAP: $(cat "$PWR_CAP_FILE")" >> "$BACKUP_STATE_FILE"

  # Zero RPM
  [[ -r $SYS_ZERO_RPM_ENABLE    ]] && cat "$SYS_ZERO_RPM_ENABLE"    >> "$BACKUP_STATE_FILE"
  [[ -r $SYS_ZERO_RPM_STOP_TEMP ]] && cat "$SYS_ZERO_RPM_STOP_TEMP" >> "$BACKUP_STATE_FILE"

  echo "Written initial backup states to $BACKUP_STATE_FILE"
}

function restore_states() {
  if [[ ! -f $BACKUP_STATE_FILE ]]; then
    echo "Cant't access initial defaults at $BACKUP_STATE_FILE, aborting."
    exit 2
  fi

  echo "Restoring all states to the initial defaults from $BACKUP_STATE_FILE"
  USER_STATE_FILE=$BACKUP_STATE_FILE
}

function clear_vars() {
  unset SCLK MCLK SCLK_OFFSET SCLK_OFFSET_METHOD
  unset VDDC_CURVE VDDGFX_OFFSET
  unset sys_device sys_hwmons
}

check_ppfeaturemask

shopt -s extglob
for USER_STATE_FILE in "$USER_STATES_PATH"*.+(card?|card??|pci:????:??:??.?); do
  BACKUP_STATE_FILE=/tmp/${USER_STATE_FILE##*/}.initial
  sys_device=/sys/class/drm/${USER_STATE_FILE##*.}/device

  if [[ $USER_STATE_FILE =~ "pci" ]]; then
    STATE_PCIDEV=${USER_STATE_FILE#*.}

    for CARD in /sys/class/drm/card{?,??}; do
      LINK=$(readlink "$CARD")
      [[ -z $LINK ]] && continue

      CARD_PCDEV=${LINK%*/drm/card*}
      [[ ${CARD_PCDEV##*/} != "${STATE_PCIDEV#*:}" ]] && continue

      sys_device=$CARD/device
    done
  fi

  SYS_PP_OD_CLK="$sys_device/pp_od_clk_voltage"
  if [[ ! -f $SYS_PP_OD_CLK ]]; then
    echo "WARNING: $SYS_PP_OD_CLK does not exist, skipping!"
    continue
  fi

  sys_hwmons=( "$sys_device"/hwmon/hwmon[0-9] )
  PWR_LEVEL=$sys_device/power_dpm_force_performance_level
  PWR_PROFILE=$sys_device/pp_power_profile_mode
  SYS_DPM_SCLK=$sys_device/pp_dpm_sclk
  SYS_DPM_MCLK=$sys_device/pp_dpm_mclk
  PWR_CAP_FILE=${sys_hwmons[0]}/power1_cap
  SYS_ZERO_RPM_ENABLE=$sys_device/gpu_od/fan_ctrl/fan_zero_rpm_enable
  SYS_ZERO_RPM_STOP_TEMP=$sys_device/gpu_od/fan_ctrl/fan_zero_rpm_stop_temperature

  if [[ $RESTORE == "true" ]]; then
    restore_states
  else
    backup_states
  fi
  echo ""
  echo "Detecting the state values at $SYS_PP_OD_CLK:"
  parse_states "$SYS_PP_OD_CLK"

  if [[ -r $SYS_ZERO_RPM_ENABLE ]]; then
    echo ""
    echo "Detecting the state values at $SYS_ZERO_RPM_ENABLE:"
    parse_states "$SYS_ZERO_RPM_ENABLE"
  fi
  if [[ -r $SYS_ZERO_RPM_STOP_TEMP ]]; then
    echo ""
    echo "Detecting the state values at $SYS_ZERO_RPM_STOP_TEMP:"
    parse_states "$SYS_ZERO_RPM_STOP_TEMP"
  fi

  echo ""
  echo "Verifying user state values at $USER_STATE_FILE:"
  parse_states "$USER_STATE_FILE"

  echo ""
  echo "Committing custom states to $SYS_PP_OD_CLK:"
  set_custom_states
  echo "  Done"
  clear_vars
done
